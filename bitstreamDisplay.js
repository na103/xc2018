const XSIZE = 7; // Each digit is a XSIZE x YSIZE block.
const YSIZE = 9;
  /**
   * Displays the bitstream data.
   */
  function drawBitstream(ctx, bitstream) {
    $("#bitstreamSpan").css('display', 'inline');
    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    if (bitstream == null) {
      return;
    }
    ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset
    const HEIGHT = YSIZE * 71 + 3;
    const WIDTH = XSIZE * 160 + 3;
    ctx.canvas.height = HEIGHT;
    ctx.canvas.width = WIDTH;
    $("#container").css('height', HEIGHT + 'px');
    $("#container").css('width', WIDTH + 'px');
    $("#info").css('margin-left', WIDTH + 'px');
    $("#info3").css('margin-left', '0px');
    $("#info3").css('clear', 'both');

    if ($("#colors").is(":checked")) {
      drawBg(ctx);
    }

    // Draw labels and boxes
    ctx.font = "45pt arial";
    var xpos = 3; // 3 bits to first cell.
    ctx.strokeStyle = "#ccc";
    ctx.beginPath();
    ctx.rect(0, 0, 160 * XSIZE, 71 * YSIZE);
    ctx.stroke();
    ctx.strokeStyle = "#fbb";
    ctx.beginPath();
    ctx.fillStyle = "#00f";
    for (var x = 0; x < 8; x++) {
      if (x == 3 || x == 6) {
        xpos += 2; // Skip buffer
      }
      var ypos = 1; // 1 bit to first cell
      for (var y = 0; y < 8; y++) {
        if (y == 3 || y == 6) {
          ypos += 1; // Skip buffer
        }
        if ($("#labels").is(":checked")) {
          ctx.globalAlpha = 0.2;
          fillText(ctx, "ABCDEFGH"[y] + "ABCDEFGH"[x], 25 + xpos * XSIZE, 57 + ypos * YSIZE);
          ctx.globalAlpha = 1;
        }
        ctx.rect(xpos * XSIZE, ypos * YSIZE, 18 * XSIZE, 8 * YSIZE);
        ypos += 8; // 8 bits per tile
      }
      xpos += 18; // 18 bits per tile
    }
    ctx.stroke();

    // Draw data
    $("#img").css('opacity', 0);
    ctx.font = "10pt arial";
    ctx.fillStyle = "black";
    for (var x = 0; x < 160; x++) {
      for (var y = 0; y < 71; y++) {
        if (getDefaultBit(x, y) != bitstream[x][y]) {
          ctx.fillStyle = '#ccc';
          fillText(ctx, bitstream[x][y] == 0 ? ' ' : '1', 1 + x * XSIZE, 7 + y * YSIZE);
        } else {
          ctx.fillStyle = 'black';
          fillText(ctx, bitstream[x][y], x * XSIZE - 1, YSIZE - 1 + y * YSIZE);
        }
      }
    }
  }

  /**
   * Color the background of the bit display according to function.
   */
  function drawBg(ctx) {
    for (let i = 0; i < 160 * 71; i++) {
      let type = bitTypes[i];
      let y = 70 - (i % 71);
      let x = 159 - Math.floor(i / 71);
      if (type == undefined) {
        continue;
      } else if (type == BITTYPE.lut) {
        ctx.fillStyle = '#f88';
      } else if (type == BITTYPE.clb) {
        ctx.fillStyle = '#cfc';
      } else if (type == BITTYPE.pip) {
        ctx.fillStyle = '#0cf';
      } else if (type == BITTYPE.mux) {
        ctx.fillStyle = '#cff';
      } else if (type == BITTYPE.switch) {
        ctx.fillStyle = '#fcf';
      } else if (type == BITTYPE.iob) {
        ctx.fillStyle = '#ffc';
      } else if (type == BITTYPE.other) {
        ctx.fillStyle = '#ccc';
      }
      ctx.fillRect(x * XSIZE, y * YSIZE, XSIZE, YSIZE);
    }
  }

  // Processes a click on the bitstream image
  function bitstreamClick(x, y) {
    if (config == null) {
      return;
    }
    const xn = Math.trunc(x / XSIZE); // Convert to bit indices
    const yn = Math.trunc(y / YSIZE);
    const n = (159 - xn) * 71 + (70 - yn);
    $("#info3").html(xn + ' ' + yn + 'Bit ' + n + ' = ' + rawBitstream[n] + ": " + config[n]);
  }

// Default bitstream for an empty configuration, encoded as 32-bit ints for compactness
const empty = [[2743085280, 3758263808, 10715176, 685769358, 41856, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1082134562, 536936960, 4227088, 270532866, 16512, 0], [0, 0, 0, 0, 0, 0], [1073745922, 65536, 4194320, 268435712, 671105024, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [1082134562, 536936960, 4227088, 270532866, 16512, 0], [0, 0, 0, 0, 3221225472, 0], [1073745922, 65536, 4194320, 268435712, 671105024, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [1082134562, 536936960, 4227088, 270532866, 16512, 0], [0, 0, 0, 0, 3221225472, 0], [1073745922, 65536, 4194320, 268435712, 671105024, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [1082134562, 536936960, 4227088, 270532866, 16512, 0], [0, 0, 0, 0, 3221225472, 0], [1073745922, 65536, 4194320, 268435712, 671105024, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1082134562, 536936960, 4227088, 270532866, 16512, 0], [0, 0, 0, 0, 0, 0], [1073745922, 65536, 4194320, 268435712, 671105024, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [1082134562, 536936960, 4227088, 270532866, 16512, 0], [0, 0, 0, 0, 3221225472, 0], [1073745922, 65536, 4194320, 268435712, 671105024, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [1082134562, 536936960, 4227088, 270532866, 16512, 0], [0, 0, 0, 0, 3221225472, 0], [1073745922, 65536, 4194320, 268435712, 671105024, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [1082134560, 536936960, 4227088, 270532866, 16512, 0], [0, 0, 0, 0, 3221225472, 0], [1073745920, 65536, 4194320, 268435712, 16384, 0], [0, 0, 0, 0, 2147483648, 0], [0, 0, 0, 0, 1073741824, 0], [0, 0, 0, 0, 0, 0], [2743085286, 3758263808, 10715176, 685769358, 41856, 0]];

function getDefaultBit(x, y) {
  return (empty[y][Math.floor(x / 32)] & (1 << (x % 32))) ? 1 : 0;
}

function getDemoBit(x, y) {
  return (twarp[y][Math.floor(x / 32)] & (1 << (x % 32))) ? 1 : 0;
}

function makeDemoBitstream() {
  for (var x = 0; x < 160; x++) {
    for (var y = 0; y < 71; y++) {
      const n = (159 - x) * 71 + (70 - y);
      rawBitstream[n] = 1 - getDemoBit(x, y);
      
    }
  }
  bitstreamTable = makeBitstreamTable(rawBitstream);
  return rawBitstream;
}

// Hardcoded sample file from TimeWarp board.
const twarp = [[2744166624, 3872558655, 2997063976, 3907439246, 4957133, 0], [283140096, 167772296, 2185289728, 67634178, 830476516, 0], [25165824, 134226308, 2162690, 16789512, 9438244, 0], [335565328, 17907720, 873595392, 1638438, 528386, 0], [44040208, 268435456, 278528, 2621452, 335545120, 0], [19431492, 1371026144, 570501124, 1126236211, 40046872, 0], [3229700130, 537133570, 88113488, 2149581826, 180352, 0], [1065998, 134217728, 1091580102, 1074791488, 54595632, 0], [1075308538, 1073830912, 1604313232, 348675192, 744464364, 0], [1074397185, 3238659074, 177221633, 4333568, 2718040272, 0], [293601280, 536875584, 67108993, 2166376644, 605028360, 0], [1082394704, 538575382, 67675392, 270565380, 33571844, 0], [838890656, 1342621824, 29884452, 470811969, 536920096, 0], [19956522, 616563956, 1946238131, 5458035, 8166532, 0], [1082146848, 538247685, 46170176, 2954887682, 2415919232, 0], [136332294, 151781571, 2736279750, 1107362880, 2734821424, 0], [1078060870, 1161238532, 274702848, 1360019458, 738689952, 0], [69730829, 1111494784, 310673416, 554827776, 1627398176, 0], [4980736, 2156921093, 17968, 335552646, 69341440, 0], [8855552, 536888096, 343966976, 571491220, 16826373, 0], [1375757840, 537362944, 2157248608, 807405312, 16823552, 0], [211583042, 1095774804, 1964055744, 541474884, 271060172, 0], [8433696, 537133570, 46170448, 1344277250, 2416050305, 0], [268435470, 134234113, 2736279686, 1175520320, 2734692432, 0], [385881830, 536960006, 71338000, 335282180, 1040209777, 0], [137379840, 151265473, 3240108106, 1208484000, 1086334992, 0], [2149582027, 38798352, 100794880, 276, 54923539, 0], [285212672, 1073750528, 74780, 73402626, 805306880, 0], [2290884632, 1073748256, 285344769, 18893568, 532997, 0], [3355463680, 2147894529, 8396868, 2099250248, 1107334176, 0], [20218658, 1140982952, 1107383616, 53825650, 1249516697, 0], [1082130464, 538247685, 46170448, 2149582850, 3221291136, 0], [406881286, 134217921, 1091579972, 100731904, 2684360704, 0], [1082254454, 3422621700, 75633445, 390152052, 771775744, 0], [2098752, 281026580, 1213268481, 2236417, 67113004, 0], [71827456, 143130784, 33554512, 2285914400, 135168, 0], [142737408, 5, 67141634, 603996162, 604013345, 0], [2466255888, 537003008, 13770848, 2097678154, 20992, 0], [213844768, 547385956, 2954662211, 2152050738, 15469788, 0], [8405024, 537133570, 33587328, 1344275458, 131201, 0], [402654726, 17055872, 1572864, 101187680, 50331648, 0], [1560287046, 3225420544, 5701653, 284688732, 536894720, 0], [404881437, 1109417992, 167903744, 1107427332, 290456320, 0], [1073741824, 538247301, 269508953, 2149599238, 335544644, 0], [76423232, 2688551448, 272663552, 1210601730, 17039912, 0], [2554359840, 2147897472, 13770806, 881329874, 671186976, 0], [20218658, 1111519850, 3541865664, 121096242, 7602446, 0], [3229614112, 537133570, 16810160, 2149582850, 2416099456, 0], [404784142, 151019555, 1092094148, 3221226560, 3275821088, 0], [1090642358, 92363784, 2866217010, 3611299448, 2894041086, 0], [137379848, 134521025, 3240632386, 1242103808, 1619009584, 0], [70255243, 2197815304, 33554961, 16920592, 940343299, 0], [272629760, 537397569, 277872912, 1074791433, 1082263600, 0], [327688, 12091410, 68190217, 134242436, 132, 0], [2422224400, 1074225409, 29425789, 1958740562, 16896096, 0], [285999194, 1137722709, 806136384, 119795717, 1077412123, 0], [1082175520, 538247685, 33104, 1075841794, 180352, 0], [405815304, 277635265, 34611206, 100663393, 3292598304, 0], [3677425802, 3850437069, 2274820118, 390070591, 712802912, 0], [33952027, 572558341, 1087635652, 2148073612, 1107460096, 0], [6291456, 1078460432, 8405000, 16785664, 889210249, 0], [50340360, 1077936640, 271319041, 21516290, 51380352, 0], [3525342368, 268948481, 9461862, 612893544, 55360, 0], [1283719234, 626012780, 940348739, 52941874, 8064149, 0], [8433696, 536871426, 16809984, 2097154, 3221356672, 0], [1066512, 134758528, 2149056644, 2215118912, 3221295104, 0], [1560294144, 2283694208, 2153578982, 3867942414, 268933761, 0], [2281980075, 824182920, 1107314688, 1048849, 2965910792, 0], [576716800, 1073742864, 807436288, 16785412, 1879090180, 0], [2637876, 713032386, 2181046272, 1613366528, 8519912, 0], [596027618, 3428764834, 1186155756, 2798439130, 3584964, 0]];
